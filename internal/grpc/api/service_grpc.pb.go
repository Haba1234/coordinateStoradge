// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsClient interface {
	StreamDots(ctx context.Context, opts ...grpc.CallOption) (Statistics_StreamDotsClient, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) StreamDots(ctx context.Context, opts ...grpc.CallOption) (Statistics_StreamDotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Statistics_ServiceDesc.Streams[0], "/service.Statistics/StreamDots", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsStreamDotsClient{stream}
	return x, nil
}

type Statistics_StreamDotsClient interface {
	Send(*ClientStream) error
	Recv() (*ServerStream, error)
	grpc.ClientStream
}

type statisticsStreamDotsClient struct {
	grpc.ClientStream
}

func (x *statisticsStreamDotsClient) Send(m *ClientStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statisticsStreamDotsClient) Recv() (*ServerStream, error) {
	m := new(ServerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticsServer is the server API for Statistics service.
// All implementations must embed UnimplementedStatisticsServer
// for forward compatibility
type StatisticsServer interface {
	StreamDots(Statistics_StreamDotsServer) error
	mustEmbedUnimplementedStatisticsServer()
}

// UnimplementedStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServer struct {
}

func (UnimplementedStatisticsServer) StreamDots(Statistics_StreamDotsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDots not implemented")
}
func (UnimplementedStatisticsServer) mustEmbedUnimplementedStatisticsServer() {}

// UnsafeStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServer will
// result in compilation errors.
type UnsafeStatisticsServer interface {
	mustEmbedUnimplementedStatisticsServer()
}

func RegisterStatisticsServer(s grpc.ServiceRegistrar, srv StatisticsServer) {
	s.RegisterService(&Statistics_ServiceDesc, srv)
}

func _Statistics_StreamDots_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatisticsServer).StreamDots(&statisticsStreamDotsServer{stream})
}

type Statistics_StreamDotsServer interface {
	Send(*ServerStream) error
	Recv() (*ClientStream, error)
	grpc.ServerStream
}

type statisticsStreamDotsServer struct {
	grpc.ServerStream
}

func (x *statisticsStreamDotsServer) Send(m *ServerStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statisticsStreamDotsServer) Recv() (*ClientStream, error) {
	m := new(ClientStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Statistics_ServiceDesc is the grpc.ServiceDesc for Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDots",
			Handler:       _Statistics_StreamDots_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
